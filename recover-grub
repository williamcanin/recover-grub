#!/bin/bash
#
# ******************************************************************************
# Type: Shell Script
# Description: Mount partition Arch Linux and Recover the Grub on Arch Linux
# Script Name: Recover Grub
# Release Status: 1.1.0
# Project URL: https://github.com/williamcanin/recover-grub.git
# URL Script: http://git.io/recover-grub

# Author: William C. Canin
#   E-Mail: william.costa.canin@gmail.com
#   Home page: http://williamcanin.guthub.io


# License:
# The MIT License (MIT) for Recover Grub

# Copyright (c) 2015 William C. Canin <william.costa.canin@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ******************************************************************************
#

# Constants
#
exportpath="false"
device="$2"
device_choose="null"
mount_device_status="false"
year_current="$(date +%Y)"
Orange="\033[30;0;33m"
Red="\033[30;0;31m"
White="\033[30;0;1m"
Green="\033[30;0;32m"
Blue="\033[30;0;34m"
None="\033[00m"
Error="[${Red} Error ${None}]"
Warning="[${Orange} Warning ${None}]"
Ok="[${Green} Ok ${None}]"
Wait="[${White} Wait ${None}]"


# Variables
#
mount_dir="/mnt"
type_partition="ext4"
program_name="Recover Grub"
version="1.1.1"
executable="recover-grub"
path_script="${mount_dir}/"




# Credits
function _credits(){
cat << EOT

 ---------------------------------------------------------
|               ${program_name} - Version ${version}              |
 ---------------------------------------------------------
|                         Credits:                        |
|                                                         |
|           Author: William da Costa Canin                |
|           E-Mail: william.costa.canin@gmail.com         |
|           Homepage: http://williamcanin.github.io       |
|           Locale: Brazil - SP                           |
|                                                         |
|                                                         |
|    ${program_name} Â© 2015-$year_current - All Right Reserved.       |
|    Page: http://github.com/williamcanin/recover-grub    |
|---------------------------------------------------------|

EOT
}

# Export Path
function _export_path(){
  if [[ $exportpath == "false" ]]; then
    PATH="$PATH:./"
    export PATH
    sed -i "s|^  exportpath=.*|  exportpath=\"true\"|g" $0
  fi
}


function _wait_spinner(){
  sleep $1 &
  PID=$!
  i=1
  sp="/-\|"
  echo -n ' '
  setterm -cursor off
  printf ' '
  while [ -d /proc/$PID ]
  do
    printf "\b${sp:i++%${#sp}:1}"
  done
  printf "\n"
  setterm -cursor on
}

function _recover_grub_start(){
  if [[ $device_choose != "null" ]]; then
    printf "${Wait} ${White}The $program_name will perform the upgrade and installation of Grub ${None}"
    _wait_spinner "5"
    grub-mkconfig -o /boot/grub/grub.cfg
    grub-install /dev/$device_choose
    rm -f /usr/bin/$executable
  else
    printf "${Error} ${White}There was an error in the device choice before entering the Arch Linux.${None}\n"
    exit 1
  fi
}

function _help(){
  printf ""
}

function _umount_device(){
  # -- Obsolete --
  # umount $mount_dir/dev/pts
  # umount $mount_dir/dev
  # umount $mount_dir/proc
  # umount $mount_dir/sys
  # -- Obsolete --
  umount -R $mount_dir
  printf "${Ok} Dismantling made partitions.\n"
  printf "${Ok} ${White}Successfully restructured Grub!${None}\n"
}

function _mount_device(){
  if [[ $mount_device_status == "false" ]]; then
    number_partitions=$(lsblk -f | grep $type_partition | cut -d"e" -f1 | cut -d"a" -f2 | sed ':a;$!N;s/\n//;ta;'n)
    for i in $number_partitions; do
      mount -t $type_partition /dev/$device$i $mount_dir
      if [[ -f "$mount_dir/etc/os-release" ]]; then
        distro_name=$(cat $mount_dir/etc/os-release | grep ^NAME | cut -d"=" -f2 | cut -d"\"" -f2)
        if [[ "$distro_name" == "Arch Linux" ]]; then
          # Set constants
          sed -i "s|^device_choose=.*|device_choose=\"$device\"|g" $0
          sed -i "s|^mount_device_status=.*|mount_device_status=\"true\"|g" $0

          printf "${Ok} ${White}$distro_name device found!${None}\n"
          cp -f $0 $mount_dir/usr/bin
          chmod +x $mount_dir/usr/bin/$executable
          printf "${Ok} ${White}Files copied done.${None}\n"
          mount --bind /dev $mount_dir/dev
          mount --bind /dev/pts $mount_dir/dev/pts
          mount --bind /proc $mount_dir/proc
          mount --bind /sys $mount_dir/sys
          printf "${Ok} ${White}Mounts directories done.${None}\n"
          printf "${Wait} ${White}Enter the system found $distro_name ${None}"
          _wait_spinner "3"
          chroot $mount_dir /bin/bash
          # printf "${Ok} ${White}Successfully restructured Grub!${None}\n"
          _umount_device
          exit 0
        fi
       else
        printf "${Error} ${White} Sorry, but it seems that the mounted partitions did not return the file: \"/etc/os-release\" :(\n${None}"
        exit 1
      fi
    done
  fi
}




# case "$1" in
#    device)
#       _mount_device "$2"
#     ;;
#    start)
#     # _recover_grub_start
#    ;;
#    credits)
#     clear
#     _credits
#    ;;
#    help)
#     _help
#    ;;
#     *)
#       printf "\n* Usage: bash $0 device <sda|sdb|sdc> | help\n\n"
#     ;;
# esac
# exit 0
