#!/usr/bin/env python3

# Information:
#
# ******************************************************************************
# Type: Shell Script
# Description: Mount partition Linux and Recover the Grub on Linux
# Script Name: Recover Grub
# Project URL: https://github.com/williamcanin/recover-grub.git
# URL Script: http://git.io/recover-grub

# Author: William C. Canin
#   Contacts:
#   E-Mail: william.costa.canin@gmail.com
#   WebSite: https://williamcanin.github.io
#   GitHub: https://github.com/williamcanin


class RecoverGrub():

    """ Config """
    config = {'appname': 'Recover Grub',
              'appscript': 'recover-grub',
              'python_version': 3,
              'modules': ['pyudev'],
              'system': 'OS',
              'appversion': '3.0',
              'mount_dir': '/mnt',
              'name_crypto_open': 'filesystem',
              'crypto_type': 'crypto_LUKS'
              }

    """ Modules External """
    def modules_external(self, all_packages: list):
        from importlib import util
        for item in all_packages:
            spec = util.find_spec(item)
            if spec is None:
                try:
                    import subprocess
                    import sys
                    subprocess.call([sys.executable, "-m", "pip", "install",
                                    "--user", item])
                except Exception as e:
                    print('There was an error installing the dependencies.', e)
                    exit(1)
        return print('All dependencies have been resolved and installed.')

    """ Verify version Python """
    def python_version_required(self, p_version: int):
        import sys
        if sys.version_info[0] < p_version:
            raise Exception('Must be using Python {0}'.format(p_version))

    """ Menu """
    def menu_args(self):
        from argparse import ArgumentParser
        try:
            parser = ArgumentParser(prog='prog',
                                    usage='usage',
                                    description='desc')
            parser.add_argument('command', action='store',
                                type=str, default='download')
            args = parser.parse_args()
            return args

        except Exception as err:
            print('Err! Erro na passagem de argumentos.', err)

    """ Get Device SD/HD """
    def get_device(self):
        import pyudev
        context = pyudev.Context()
        for device in context.list_devices(MAJOR='8'):
            if (device.device_type == 'disk'):
                dev_node = device.device_node
                # dev_type = device.device_type
        return dev_node

    """ Check OS"""
    def check_system(self):
        if self.config['system'].lower() == 'os':
            from sys import platform
            if platform == "linux" or platform == "linux2":
                check_sys = 'linux'
            elif platform == "darwin":
                check_sys = 'osx'
            elif platform == "win32":
                check_sys = 'windows'
        elif self.config['system'].lower() == 'distro':
            import platform
            check_sys = str(platform.dist()[0])
        else:
            raise Exception('Error check system.')
        return check_sys

    """ Main """
    def main(self):
        """ Requeriments """
        self.python_version_required(self.config['python_version'])
        self.modules_external(self.config['modules'])
        self.check_system()
        """ Start """
        self.menu_args()


if __name__ == '__main__':
    recover_grub = RecoverGrub()
    recover_grub.main()
