#!/usr/bin/env python3

# Information:
#
# ******************************************************************************
# Type: Python
# Description: Mount partition Linux and Recover the Grub on Linux
# Script Name: Recover Grub
# Project URL: https://github.com/williamcanin/recover-grub.git
# URL Script: http://git.io/recover-grub

# Author: William C. Canin
#   Contacts:
#   E-Mail: william.costa.canin@gmail.com
#   WebSite: https://williamcanin.github.io
#   GitHub: https://github.com/williamcanin


class RecoverGrub():

    """ Config """
    config = {'appname': 'Recover Grub',
              'appscript': 'recover-grub',
              'python_version': 3,
              'modules': ['pyudev', 'psutil'],
              'system': 'OS',
              'appversion': '3.0',
              'mount_dir': '/mnt',
              'name_crypto_open': 'filesystem',
              'crypto_type': 'crypto_LUKS'
              }

    """ Modules External """
    def modules_external(self, all_packages: list):
        from importlib import util
        for item in all_packages:
            spec = util.find_spec(item)
            if spec is None:
                try:
                    import subprocess
                    import sys
                    subprocess.call([sys.executable, "-m", "pip", "install",
                                    "--user", item])
                except Exception as e:
                    print('There was an error installing the dependencies.', e)
                    exit(1)
        # return print('All dependencies have been resolved and installed.')

    """ Verify version Python """
    def python_version_required(self, p_version: int):
        import sys
        if sys.version_info[0] < p_version:
            raise Exception('Must be using Python {0}'.format(p_version))

    """ Menu """
    def menu_args(self):
        from argparse import ArgumentParser
        try:
            parser = ArgumentParser(prog='prog',
                                    usage='usage',
                                    description='desc')
            parser.add_argument('command', action='store',
                                type=str, default='download')
            args = parser.parse_args()
            return args

        except Exception as err:
            print('Err! Erro na passagem de argumentos.', err)

    """ Get device SD/HD/VD """
    def get_device(self):
        import pyudev
        context = pyudev.Context()
        for device in context.list_devices(MAJOR='8'):
            if (device.device_type == 'disk'):
                dev_node = device.device_node
                # dev_type = device.device_type
        return dev_node

    """ Select device SD/HD/VD """
    def select_device(self):
        # list_devices = ['/dev/sda', '/dev/sdb'] # line test
        list_devices = [self.get_device()]
        print('\nSelect the device in which the Grub will be recovered.')
        opt = True
        while opt:
            print()
            for index, item in enumerate(list_devices, start=1):
                print(f'{index}: {item}')
            print(f'{index + 1}: Quit')

            choice = input(f'\nPlease enter your choice (1-{index + 1}): ')
            choice = int(choice)
            if choice == int(index + 1):
                print('Aborted by user')
                opt = False
                exit(0)
            elif choice >= int(index + 1):
                print('Option invalid')
                opt = True
            else:
                opt = False
                choice = int(choice) - 1
                choice_device = list_devices[choice]

        return choice_device

    """ Check OS """
    def check_system(self):
        if self.config['system'].lower() == 'os':
            from sys import platform
            if platform == "linux" or platform == "linux2":
                check_sys = 'linux'
            elif platform == "darwin":
                check_sys = 'osx'
            elif platform == "win32":
                check_sys = 'windows'
        elif self.config['system'].lower() == 'distro':
            import platform
            check_sys = str(platform.dist()[0])
        else:
            raise Exception('Error check system.')
        return check_sys

    """ Select partitions """
    def select_type_partition(self):
        print('Select the partition type that the system is installed on:')
        opt = True
        while opt:
            choice = input(f"""
1: Ext3/Ext4
2: {self.config['crypto_type'].title().replace('_', ' (')})
3: Quit

Please enter your choice (1-3): """)

            try:
                if choice == "1":
                    opt = False
                    type_partition = 'ext'
                elif choice == "2":
                    opt = False
                    type_partition = self.config['crypto_type']
                elif choice == "3":
                    opt = False
                    return print('Aborted by user.')
                else:
                    print('Option invalid!')
                    opt = True
            except Exception as e:
                return print('Error!.', e)
            except KeyboardInterrupt as ki:
                return print('Interrupt by user.', ki)

        return type_partition

    """ Mount partition """
    def mount_partition(self, pselect):
        from os.path import isfile
        from subprocess import check_output, STDOUT
        shell_command = '''sudo blkid | grep ''' + pselect + '''| awk '{print $1}' |
                        cut -d":" -f1'''
        output = check_output(shell_command, shell=True, stderr=STDOUT,
                              universal_newlines=True).splitlines()

        if pselect == 'ext':
            for partition in output:
                print(f'mount {partition} {self.config["mount_dir"]}')
                if isfile('/etc/os-release'):
                    print(f'mount --bind /dev {self.config["mount_dir"]}/dev')
                    print(f'mount --bind /dev/pts \
                          {self.config["mount_dir"]}/dev/pts')
                    print(f'mount --bind /proc \
                          {self.config["mount_dir"]}/proc')
                    print(f'mount --bind /sys {self.config["mount_dir"]}/sys')
                else:
                    print(f'umount {self.config["mount_dir"]}')
        elif pselect == 'crypto_LUKS':
            print('partition luks')

    """ Sudo prompt """
    def prompt_sudo(self):
        import os
        import subprocess
        uid = 0
        if os.geteuid() != 0:
            msg = "[sudo] password for %u:"
            uid = subprocess.check_call("sudo -v -p '%s'" % msg, shell=True)
        return uid

    """ Blkid """
    def blkid(self):
        import os
        import subprocess
        uid = 0
        if os.geteuid() != 0:
            msg = "[sudo] password for %u:"
            uid = subprocess.check_call("sudo blkid | grep ext | awk \
            '{print $1}' | cut -d\":\" -f1 '%s'" % msg, shell=True)
        return print(uid)

    """ Requeriments """
    def requeriments(self):
        """ Requeriments """
        self.python_version_required(self.config['python_version'])
        self.modules_external(self.config['modules'])
        self.check_system()

    """ Main """
    def main(self):
        self.requeriments()
        """ Start """
        args = self.menu_args()
        if args.command == 'device':
            # self.select_type_partition()
            # self.select_device()
            self.mount_partition(self.select_type_partition())


if __name__ == '__main__':
    recover_grub = RecoverGrub()
    recover_grub.main()
